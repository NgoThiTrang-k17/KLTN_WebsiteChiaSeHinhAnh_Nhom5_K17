{"version":3,"sources":["../../../projects/ngx-show-hide-password/src/lib/show-hide.service.ts","../../../projects/ngx-show-hide-password/src/lib/show-hide-trigger.directive.ts","../../../projects/ngx-show-hide-password/src/lib/show-hide-status.directive.ts","../../../projects/ngx-show-hide-password/src/lib/show-hide-password.component.ts","../../../projects/ngx-show-hide-password/src/lib/show-hide-input.directive.ts","../../../projects/ngx-show-hide-password/src/lib/show-hide-password.module.ts"],"names":["ShowHideService","this","states","prototype","getIO","id","io","find","o","init","show","subject","ReplaySubject","push","saveAndProadcast","next","getObservable","setShow","toggleShow","Injectable","args","providedIn","ShowHideTriggerDirective","service","errorHandler","onClick","showHideTrigger","handleError","Error","Directive","selector","ErrorHandler","Input","HostListener","ShowHideStatusDirective","el","renderer","Object","defineProperty","config","_this","assign","hide","materialIcon","subscription","subscribe","updateStatus","setProperty","nativeElement","removeClass","addClass","ngOnDestroy","unsubscribe","ElementRef","Renderer2","BtnStyle","ShowHideInputDirective","registerElementId","type","ngOnInit","setAttribute","uuid","a","Math","random","toString","replace","ShowHidePasswordComponent","elem","btnStyle","Secondary","btnOutline","faEye","faEyeSlash","input","querySelector","getAttribute","size","isHidden","Component","changeDetection","ChangeDetectionStrategy","OnPush","template","NgModule","imports","CommonModule","FormsModule","FontAwesomeModule","exports","declarations"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable, Subject, ReplaySubject } from 'rxjs';\n\ninterface IState {\n  id: string;\n  show: boolean;\n  subject?: Subject<boolean>;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ShowHideService {\n  private readonly states = [];\n\n  constructor() {}\n\n  private getIO(id: string): IState {\n    let io = this.states.find(o => o.id === id);\n    if (!io && id) {\n      io = this.init(id);\n    }\n    return io;\n  }\n\n  private init(id: string): IState {\n    const subject = new ReplaySubject<boolean>(1);\n    const io = {\n      id,\n      show: false,\n      subject\n    };\n    this.states.push(io);\n    return io;\n  }\n\n  private saveAndProadcast(io: IState, show: boolean) {\n    io.show = show;\n    io.subject.next(io.show);\n  }\n\n  public getObservable(id: string): Observable<boolean> {\n    return this.getIO(id).subject;\n  }\n\n  public setShow(id: string, show: boolean): void {\n    this.saveAndProadcast(this.getIO(id), show);\n  }\n\n  public toggleShow(id: string): void {\n    const io = this.getIO(id);\n    this.saveAndProadcast(io, !io.show);\n  }\n}\n","import { Directive, HostListener, Input, ErrorHandler } from '@angular/core';\nimport { ShowHideService } from './show-hide.service';\n\n@Directive({\n  selector: '[showHideTrigger]'\n})\nexport class ShowHideTriggerDirective {\n  @Input() showHideTrigger?: string;\n\n  constructor(private service: ShowHideService, private errorHandler: ErrorHandler) {}\n\n  @HostListener('click')\n  onClick() {\n    if (this.showHideTrigger) {\n      this.service.toggleShow(this.showHideTrigger);\n    } else {\n      this.errorHandler.handleError(new Error(`Status can not be changed without [id].`));\n    }\n  }\n}\n","import { Directive, ElementRef, Renderer2, Input, ErrorHandler, OnDestroy } from '@angular/core';\nimport { ShowHideService } from './show-hide.service';\nimport { Subscription } from 'rxjs';\n\nexport interface ShowHideStatusConfig {\n  id?: string;\n  show?: string;\n  hide?: string;\n  materialIcon?: boolean;\n}\n\n@Directive({\n  selector: '[showHideStatus]'\n})\nexport class ShowHideStatusDirective implements OnDestroy {\n  private config: ShowHideStatusConfig;\n  private subscription: Subscription;\n\n  @Input() set showHideStatus(config: ShowHideStatusConfig) {\n    this.init(config);\n  }\n\n  constructor(\n    private service: ShowHideService,\n    private el: ElementRef,\n    private renderer: Renderer2,\n    private errorHandler: ErrorHandler\n  ) {}\n\n  private init(config: ShowHideStatusConfig): void {\n    const defaultConfig = {\n      show: 'visibility',\n      hide: 'visibility_off',\n      materialIcon: false,\n      id: null\n    };\n    this.config = {\n      ...defaultConfig,\n      ...config\n    };\n    if (this.config.id) {\n      this.subscription = this.service\n        .getObservable(this.config.id)\n        .subscribe(show => this.updateStatus(show));\n    } else {\n      this.errorHandler.handleError(new Error(`Status can not be set without [id].`));\n    }\n  }\n\n  private updateStatus(show: boolean) {\n    if (this.config.materialIcon) {\n      this.renderer.setProperty(\n        this.el.nativeElement,\n        'innerHTML',\n        show ? this.config.hide : this.config.show\n      );\n    } else {\n      this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);\n      this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  Input,\n  OnInit,\n  Renderer2,\n  ChangeDetectionStrategy,\n  OnDestroy\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';\nimport { ShowHideService } from './show-hide.service';\n\nexport enum BtnStyle {\n  Primary = 'primary',\n  Secondary = 'secondary',\n  Success = 'success',\n  Danger = 'danger',\n  Warning = 'warning',\n  Info = 'info',\n  Dark = 'dark',\n  Light = 'light'\n}\n\n// hail jed https://gist.github.com/jed/982883\nconst uuid = (a?: any) =>\n  a\n    ? // tslint:disable-next-line: no-bitwise\n      (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)\n    : ('' + 1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);\n\n/**\n * Add a split input button to password or text input. Toggles input type between \"text\" and \"password\".\n *\n * @example\n * <show-hide-password size=\"sm|lg\">\n * <input type=\"password\" name=... />\n * </show-hide-password>\n */\n\n@Component({\n  selector: 'show-hide-password',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <ng-content></ng-content>\n    <div class=\"input-group-append ngx-show-hide-password\">\n      <button\n        class=\"btn\"\n        [ngClass]=\"(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)\"\n        type=\"button\"\n        [showHideTrigger]=\"id\"\n      >\n        <fa-icon\n          [fixedWidth]=\"true\"\n          size=\"lg\"\n          [icon]=\"(isHidden ? faEye : faEyeSlash)\"\n          [showHideStatus]=\"{ id: id }\"\n        ></fa-icon>\n      </button>\n    </div>\n  `\n})\nexport class ShowHidePasswordComponent implements OnInit, OnDestroy {\n  private subscription: Subscription;\n\n  @Input()\n  public btnStyle: BtnStyle = BtnStyle.Secondary;\n\n  @Input()\n  public btnOutline = true;\n\n  @Input()\n  public size: 'sm' | 'lg';\n\n  public input: any;\n\n  public isHidden: boolean;\n\n  public id: string;\n\n  public faEye = faEye;\n  public faEyeSlash = faEyeSlash;\n\n  constructor(\n    private service: ShowHideService,\n    private elem: ElementRef,\n    private renderer: Renderer2\n  ) {}\n\n  ngOnInit(): void {\n    this.input = this.elem.nativeElement.querySelector('input');\n    if (!this.input) {\n      throw new Error(`No input element found.`);\n    }\n    this.id = this.input.getAttribute('id');\n    if (!this.id) {\n      this.id = 'showHideInput_' + uuid();\n      this.renderer.setAttribute(this.input, 'id', this.id);\n    }\n    this.renderer.addClass(this.elem.nativeElement, 'input-group');\n    if (this.size === 'sm') {\n      this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');\n    } else if (this.size === 'lg') {\n      this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');\n    }\n    this.isHidden = this.input.type === 'password';\n    this.renderer.addClass(this.input, 'form-control'); // just to be sure\n    this.service.setShow(this.id, this.input.type !== 'password');\n    this.subscription = this.service\n      .getObservable(this.id)\n      .subscribe(show => {\n        this.isHidden = !show;\n        this.renderer.setAttribute(this.input, 'type', show ? 'text' : 'password');\n      });\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { Directive, ElementRef, Renderer2, OnInit, OnDestroy, HostBinding, AfterViewInit, Input } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { ShowHideService } from './show-hide.service';\n\n@Directive({\n  selector: 'input[showHideInput]'\n})\nexport class ShowHideInputDirective implements OnInit, OnDestroy {\n  private subscription: Subscription;\n  @Input() id: string;\n\n  private registerElementId() {\n    if (!this.id) {\n      throw new Error(`No attribute [id] found.`);\n    }\n    this.service.setShow(this.id, this.el.nativeElement.type !== 'password');\n  }\n\n  constructor(\n    private service: ShowHideService,\n    private el: ElementRef,\n    private renderer: Renderer2\n  ) {  }\n\n  ngOnInit(): void {\n    this.registerElementId();\n    this.service\n      .getObservable(this.id)\n      .subscribe(show =>\n        this.renderer.setAttribute(this.el.nativeElement, 'type', show ? 'text' : 'password')\n      );\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\n\nimport { ShowHideTriggerDirective } from './show-hide-trigger.directive';\nimport { ShowHideInputDirective } from './show-hide-input.directive';\nimport { ShowHideStatusDirective } from './show-hide-status.directive';\nimport { ShowHidePasswordComponent } from './show-hide-password.component';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, FontAwesomeModule],\n  exports: [\n    ShowHidePasswordComponent,\n    ShowHideTriggerDirective,\n    ShowHideInputDirective,\n    ShowHideStatusDirective\n  ],\n  declarations: [\n    ShowHidePasswordComponent,\n    ShowHideTriggerDirective,\n    ShowHideInputDirective,\n    ShowHideStatusDirective\n  ]\n})\nexport class ShowHidePasswordModule {}\n"]}