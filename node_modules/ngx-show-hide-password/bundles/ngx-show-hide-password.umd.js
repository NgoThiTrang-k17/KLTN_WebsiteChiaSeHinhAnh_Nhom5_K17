(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@fortawesome/free-solid-svg-icons'), require('@angular/common'), require('@angular/forms'), require('@fortawesome/angular-fontawesome')) :
    typeof define === 'function' && define.amd ? define('ngx-show-hide-password', ['exports', '@angular/core', 'rxjs', '@fortawesome/free-solid-svg-icons', '@angular/common', '@angular/forms', '@fortawesome/angular-fontawesome'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-show-hide-password'] = {}, global.ng.core, global.rxjs, global.freeSolidSvgIcons, global.ng.common, global.ng.forms, global.angularFontawesome));
}(this, (function (exports, i0, rxjs, freeSolidSvgIcons, common, forms, angularFontawesome) { 'use strict';

    var ShowHideService = /** @class */ (function () {
        function ShowHideService() {
            this.states = [];
        }
        ShowHideService.prototype.getIO = function (id) {
            var io = this.states.find(function (o) { return o.id === id; });
            if (!io && id) {
                io = this.init(id);
            }
            return io;
        };
        ShowHideService.prototype.init = function (id) {
            var subject = new rxjs.ReplaySubject(1);
            var io = {
                id: id,
                show: false,
                subject: subject
            };
            this.states.push(io);
            return io;
        };
        ShowHideService.prototype.saveAndProadcast = function (io, show) {
            io.show = show;
            io.subject.next(io.show);
        };
        ShowHideService.prototype.getObservable = function (id) {
            return this.getIO(id).subject;
        };
        ShowHideService.prototype.setShow = function (id, show) {
            this.saveAndProadcast(this.getIO(id), show);
        };
        ShowHideService.prototype.toggleShow = function (id) {
            var io = this.getIO(id);
            this.saveAndProadcast(io, !io.show);
        };
        return ShowHideService;
    }());
    ShowHideService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
    ShowHideService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    ShowHideService.ctorParameters = function () { return []; };

    var ShowHideTriggerDirective = /** @class */ (function () {
        function ShowHideTriggerDirective(service, errorHandler) {
            this.service = service;
            this.errorHandler = errorHandler;
        }
        ShowHideTriggerDirective.prototype.onClick = function () {
            if (this.showHideTrigger) {
                this.service.toggleShow(this.showHideTrigger);
            }
            else {
                this.errorHandler.handleError(new Error("Status can not be changed without [id]."));
            }
        };
        return ShowHideTriggerDirective;
    }());
    ShowHideTriggerDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[showHideTrigger]'
                },] }
    ];
    ShowHideTriggerDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: i0.ErrorHandler }
    ]; };
    ShowHideTriggerDirective.propDecorators = {
        showHideTrigger: [{ type: i0.Input }],
        onClick: [{ type: i0.HostListener, args: ['click',] }]
    };

    var ShowHideStatusDirective = /** @class */ (function () {
        function ShowHideStatusDirective(service, el, renderer, errorHandler) {
            this.service = service;
            this.el = el;
            this.renderer = renderer;
            this.errorHandler = errorHandler;
        }
        Object.defineProperty(ShowHideStatusDirective.prototype, "showHideStatus", {
            set: function (config) {
                this.init(config);
            },
            enumerable: false,
            configurable: true
        });
        ShowHideStatusDirective.prototype.init = function (config) {
            var _this = this;
            var defaultConfig = {
                show: 'visibility',
                hide: 'visibility_off',
                materialIcon: false,
                id: null
            };
            this.config = Object.assign(Object.assign({}, defaultConfig), config);
            if (this.config.id) {
                this.subscription = this.service
                    .getObservable(this.config.id)
                    .subscribe(function (show) { return _this.updateStatus(show); });
            }
            else {
                this.errorHandler.handleError(new Error("Status can not be set without [id]."));
            }
        };
        ShowHideStatusDirective.prototype.updateStatus = function (show) {
            if (this.config.materialIcon) {
                this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
            }
            else {
                this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
                this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
            }
        };
        ShowHideStatusDirective.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        return ShowHideStatusDirective;
    }());
    ShowHideStatusDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: '[showHideStatus]'
                },] }
    ];
    ShowHideStatusDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: i0.ElementRef },
        { type: i0.Renderer2 },
        { type: i0.ErrorHandler }
    ]; };
    ShowHideStatusDirective.propDecorators = {
        showHideStatus: [{ type: i0.Input }]
    };

    var ShowHideInputDirective = /** @class */ (function () {
        function ShowHideInputDirective(service, el, renderer) {
            this.service = service;
            this.el = el;
            this.renderer = renderer;
        }
        ShowHideInputDirective.prototype.registerElementId = function () {
            if (!this.id) {
                throw new Error("No attribute [id] found.");
            }
            this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
        };
        ShowHideInputDirective.prototype.ngOnInit = function () {
            var _this = this;
            this.registerElementId();
            this.service
                .getObservable(this.id)
                .subscribe(function (show) { return _this.renderer.setAttribute(_this.el.nativeElement, 'type', show ? 'text' : 'password'); });
        };
        ShowHideInputDirective.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        return ShowHideInputDirective;
    }());
    ShowHideInputDirective.decorators = [
        { type: i0.Directive, args: [{
                    selector: 'input[showHideInput]'
                },] }
    ];
    ShowHideInputDirective.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    ShowHideInputDirective.propDecorators = {
        id: [{ type: i0.Input }]
    };

    (function (BtnStyle) {
        BtnStyle["Primary"] = "primary";
        BtnStyle["Secondary"] = "secondary";
        BtnStyle["Success"] = "success";
        BtnStyle["Danger"] = "danger";
        BtnStyle["Warning"] = "warning";
        BtnStyle["Info"] = "info";
        BtnStyle["Dark"] = "dark";
        BtnStyle["Light"] = "light";
    })(exports.BtnStyle || (exports.BtnStyle = {}));
    // hail jed https://gist.github.com/jed/982883
    var uuid = function (a) { return a
        ? // tslint:disable-next-line: no-bitwise
            (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)
        : ('' + 1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid); };
    var ɵ0 = uuid;
    /**
     * Add a split input button to password or text input. Toggles input type between "text" and "password".
     *
     * @example
     * <show-hide-password size="sm|lg">
     * <input type="password" name=... />
     * </show-hide-password>
     */
    var ShowHidePasswordComponent = /** @class */ (function () {
        function ShowHidePasswordComponent(service, elem, renderer) {
            this.service = service;
            this.elem = elem;
            this.renderer = renderer;
            this.btnStyle = exports.BtnStyle.Secondary;
            this.btnOutline = true;
            this.faEye = freeSolidSvgIcons.faEye;
            this.faEyeSlash = freeSolidSvgIcons.faEyeSlash;
        }
        ShowHidePasswordComponent.prototype.ngOnInit = function () {
            var _this = this;
            this.input = this.elem.nativeElement.querySelector('input');
            if (!this.input) {
                throw new Error("No input element found.");
            }
            this.id = this.input.getAttribute('id');
            if (!this.id) {
                this.id = 'showHideInput_' + uuid();
                this.renderer.setAttribute(this.input, 'id', this.id);
            }
            this.renderer.addClass(this.elem.nativeElement, 'input-group');
            if (this.size === 'sm') {
                this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
            }
            else if (this.size === 'lg') {
                this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
            }
            this.isHidden = this.input.type === 'password';
            this.renderer.addClass(this.input, 'form-control'); // just to be sure
            this.service.setShow(this.id, this.input.type !== 'password');
            this.subscription = this.service
                .getObservable(this.id)
                .subscribe(function (show) {
                _this.isHidden = !show;
                _this.renderer.setAttribute(_this.input, 'type', show ? 'text' : 'password');
            });
        };
        ShowHidePasswordComponent.prototype.ngOnDestroy = function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
        };
        return ShowHidePasswordComponent;
    }());
    ShowHidePasswordComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'show-hide-password',
                    changeDetection: i0.ChangeDetectionStrategy.OnPush,
                    template: "\n    <ng-content></ng-content>\n    <div class=\"input-group-append ngx-show-hide-password\">\n      <button\n        class=\"btn\"\n        [ngClass]=\"(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)\"\n        type=\"button\"\n        [showHideTrigger]=\"id\"\n      >\n        <fa-icon\n          [fixedWidth]=\"true\"\n          size=\"lg\"\n          [icon]=\"(isHidden ? faEye : faEyeSlash)\"\n          [showHideStatus]=\"{ id: id }\"\n        ></fa-icon>\n      </button>\n    </div>\n  "
                },] }
    ];
    ShowHidePasswordComponent.ctorParameters = function () { return [
        { type: ShowHideService },
        { type: i0.ElementRef },
        { type: i0.Renderer2 }
    ]; };
    ShowHidePasswordComponent.propDecorators = {
        btnStyle: [{ type: i0.Input }],
        btnOutline: [{ type: i0.Input }],
        size: [{ type: i0.Input }]
    };

    var ShowHidePasswordModule = /** @class */ (function () {
        function ShowHidePasswordModule() {
        }
        return ShowHidePasswordModule;
    }());
    ShowHidePasswordModule.decorators = [
        { type: i0.NgModule, args: [{
                    imports: [common.CommonModule, forms.FormsModule, angularFontawesome.FontAwesomeModule],
                    exports: [
                        ShowHidePasswordComponent,
                        ShowHideTriggerDirective,
                        ShowHideInputDirective,
                        ShowHideStatusDirective
                    ],
                    declarations: [
                        ShowHidePasswordComponent,
                        ShowHideTriggerDirective,
                        ShowHideInputDirective,
                        ShowHideStatusDirective
                    ]
                },] }
    ];

    /*
     * Public API Surface of ngx-show-hide-password
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ShowHideInputDirective = ShowHideInputDirective;
    exports.ShowHidePasswordComponent = ShowHidePasswordComponent;
    exports.ShowHidePasswordModule = ShowHidePasswordModule;
    exports.ShowHideService = ShowHideService;
    exports.ShowHideStatusDirective = ShowHideStatusDirective;
    exports.ShowHideTriggerDirective = ShowHideTriggerDirective;
    exports.ɵ0 = ɵ0;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-show-hide-password.umd.js.map
