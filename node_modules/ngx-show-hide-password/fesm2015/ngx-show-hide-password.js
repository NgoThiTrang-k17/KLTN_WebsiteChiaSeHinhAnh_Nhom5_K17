import { ɵɵdefineInjectable, Injectable, Directive, ErrorHandler, Input, HostListener, ElementRef, Renderer2, Component, ChangeDetectionStrategy, NgModule } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import { faEye, faEyeSlash } from '@fortawesome/free-solid-svg-icons';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';

class ShowHideService {
    constructor() {
        this.states = [];
    }
    getIO(id) {
        let io = this.states.find(o => o.id === id);
        if (!io && id) {
            io = this.init(id);
        }
        return io;
    }
    init(id) {
        const subject = new ReplaySubject(1);
        const io = {
            id,
            show: false,
            subject
        };
        this.states.push(io);
        return io;
    }
    saveAndProadcast(io, show) {
        io.show = show;
        io.subject.next(io.show);
    }
    getObservable(id) {
        return this.getIO(id).subject;
    }
    setShow(id, show) {
        this.saveAndProadcast(this.getIO(id), show);
    }
    toggleShow(id) {
        const io = this.getIO(id);
        this.saveAndProadcast(io, !io.show);
    }
}
ShowHideService.ɵprov = ɵɵdefineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
ShowHideService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ShowHideService.ctorParameters = () => [];

class ShowHideTriggerDirective {
    constructor(service, errorHandler) {
        this.service = service;
        this.errorHandler = errorHandler;
    }
    onClick() {
        if (this.showHideTrigger) {
            this.service.toggleShow(this.showHideTrigger);
        }
        else {
            this.errorHandler.handleError(new Error(`Status can not be changed without [id].`));
        }
    }
}
ShowHideTriggerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[showHideTrigger]'
            },] }
];
ShowHideTriggerDirective.ctorParameters = () => [
    { type: ShowHideService },
    { type: ErrorHandler }
];
ShowHideTriggerDirective.propDecorators = {
    showHideTrigger: [{ type: Input }],
    onClick: [{ type: HostListener, args: ['click',] }]
};

class ShowHideStatusDirective {
    constructor(service, el, renderer, errorHandler) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
        this.errorHandler = errorHandler;
    }
    set showHideStatus(config) {
        this.init(config);
    }
    init(config) {
        const defaultConfig = {
            show: 'visibility',
            hide: 'visibility_off',
            materialIcon: false,
            id: null
        };
        this.config = Object.assign(Object.assign({}, defaultConfig), config);
        if (this.config.id) {
            this.subscription = this.service
                .getObservable(this.config.id)
                .subscribe(show => this.updateStatus(show));
        }
        else {
            this.errorHandler.handleError(new Error(`Status can not be set without [id].`));
        }
    }
    updateStatus(show) {
        if (this.config.materialIcon) {
            this.renderer.setProperty(this.el.nativeElement, 'innerHTML', show ? this.config.hide : this.config.show);
        }
        else {
            this.renderer.removeClass(this.el.nativeElement, !show ? this.config.hide : this.config.show);
            this.renderer.addClass(this.el.nativeElement, show ? this.config.hide : this.config.show);
        }
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHideStatusDirective.decorators = [
    { type: Directive, args: [{
                selector: '[showHideStatus]'
            },] }
];
ShowHideStatusDirective.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 },
    { type: ErrorHandler }
];
ShowHideStatusDirective.propDecorators = {
    showHideStatus: [{ type: Input }]
};

class ShowHideInputDirective {
    constructor(service, el, renderer) {
        this.service = service;
        this.el = el;
        this.renderer = renderer;
    }
    registerElementId() {
        if (!this.id) {
            throw new Error(`No attribute [id] found.`);
        }
        this.service.setShow(this.id, this.el.nativeElement.type !== 'password');
    }
    ngOnInit() {
        this.registerElementId();
        this.service
            .getObservable(this.id)
            .subscribe(show => this.renderer.setAttribute(this.el.nativeElement, 'type', show ? 'text' : 'password'));
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHideInputDirective.decorators = [
    { type: Directive, args: [{
                selector: 'input[showHideInput]'
            },] }
];
ShowHideInputDirective.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 }
];
ShowHideInputDirective.propDecorators = {
    id: [{ type: Input }]
};

var BtnStyle;
(function (BtnStyle) {
    BtnStyle["Primary"] = "primary";
    BtnStyle["Secondary"] = "secondary";
    BtnStyle["Success"] = "success";
    BtnStyle["Danger"] = "danger";
    BtnStyle["Warning"] = "warning";
    BtnStyle["Info"] = "info";
    BtnStyle["Dark"] = "dark";
    BtnStyle["Light"] = "light";
})(BtnStyle || (BtnStyle = {}));
// hail jed https://gist.github.com/jed/982883
const uuid = (a) => a
    ? // tslint:disable-next-line: no-bitwise
        (a ^ ((Math.random() * 16) >> (a / 4))).toString(16)
    : ('' + 1e7 + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, uuid);
const ɵ0 = uuid;
/**
 * Add a split input button to password or text input. Toggles input type between "text" and "password".
 *
 * @example
 * <show-hide-password size="sm|lg">
 * <input type="password" name=... />
 * </show-hide-password>
 */
class ShowHidePasswordComponent {
    constructor(service, elem, renderer) {
        this.service = service;
        this.elem = elem;
        this.renderer = renderer;
        this.btnStyle = BtnStyle.Secondary;
        this.btnOutline = true;
        this.faEye = faEye;
        this.faEyeSlash = faEyeSlash;
    }
    ngOnInit() {
        this.input = this.elem.nativeElement.querySelector('input');
        if (!this.input) {
            throw new Error(`No input element found.`);
        }
        this.id = this.input.getAttribute('id');
        if (!this.id) {
            this.id = 'showHideInput_' + uuid();
            this.renderer.setAttribute(this.input, 'id', this.id);
        }
        this.renderer.addClass(this.elem.nativeElement, 'input-group');
        if (this.size === 'sm') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-sm');
        }
        else if (this.size === 'lg') {
            this.renderer.addClass(this.elem.nativeElement, 'input-group-lg');
        }
        this.isHidden = this.input.type === 'password';
        this.renderer.addClass(this.input, 'form-control'); // just to be sure
        this.service.setShow(this.id, this.input.type !== 'password');
        this.subscription = this.service
            .getObservable(this.id)
            .subscribe(show => {
            this.isHidden = !show;
            this.renderer.setAttribute(this.input, 'type', show ? 'text' : 'password');
        });
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
}
ShowHidePasswordComponent.decorators = [
    { type: Component, args: [{
                selector: 'show-hide-password',
                changeDetection: ChangeDetectionStrategy.OnPush,
                template: `
    <ng-content></ng-content>
    <div class="input-group-append ngx-show-hide-password">
      <button
        class="btn"
        [ngClass]="(btnOutline ? 'btn-outline-' + btnStyle : 'btn-' + btnStyle)"
        type="button"
        [showHideTrigger]="id"
      >
        <fa-icon
          [fixedWidth]="true"
          size="lg"
          [icon]="(isHidden ? faEye : faEyeSlash)"
          [showHideStatus]="{ id: id }"
        ></fa-icon>
      </button>
    </div>
  `
            },] }
];
ShowHidePasswordComponent.ctorParameters = () => [
    { type: ShowHideService },
    { type: ElementRef },
    { type: Renderer2 }
];
ShowHidePasswordComponent.propDecorators = {
    btnStyle: [{ type: Input }],
    btnOutline: [{ type: Input }],
    size: [{ type: Input }]
};

class ShowHidePasswordModule {
}
ShowHidePasswordModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule, FormsModule, FontAwesomeModule],
                exports: [
                    ShowHidePasswordComponent,
                    ShowHideTriggerDirective,
                    ShowHideInputDirective,
                    ShowHideStatusDirective
                ],
                declarations: [
                    ShowHidePasswordComponent,
                    ShowHideTriggerDirective,
                    ShowHideInputDirective,
                    ShowHideStatusDirective
                ]
            },] }
];

/*
 * Public API Surface of ngx-show-hide-password
 */

/**
 * Generated bundle index. Do not edit.
 */

export { BtnStyle, ShowHideInputDirective, ShowHidePasswordComponent, ShowHidePasswordModule, ShowHideService, ShowHideStatusDirective, ShowHideTriggerDirective, ɵ0 };
//# sourceMappingURL=ngx-show-hide-password.js.map
