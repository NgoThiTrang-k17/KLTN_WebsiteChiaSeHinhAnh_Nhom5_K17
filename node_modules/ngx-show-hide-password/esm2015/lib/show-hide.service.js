import { Injectable } from '@angular/core';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
export class ShowHideService {
    constructor() {
        this.states = [];
    }
    getIO(id) {
        let io = this.states.find(o => o.id === id);
        if (!io && id) {
            io = this.init(id);
        }
        return io;
    }
    init(id) {
        const subject = new ReplaySubject(1);
        const io = {
            id,
            show: false,
            subject
        };
        this.states.push(io);
        return io;
    }
    saveAndProadcast(io, show) {
        io.show = show;
        io.subject.next(io.show);
    }
    getObservable(id) {
        return this.getIO(id).subject;
    }
    setShow(id, show) {
        this.saveAndProadcast(this.getIO(id), show);
    }
    toggleShow(id) {
        const io = this.getIO(id);
        this.saveAndProadcast(io, !io.show);
    }
}
ShowHideService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ShowHideService_Factory() { return new ShowHideService(); }, token: ShowHideService, providedIn: "root" });
ShowHideService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
ShowHideService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvdy1oaWRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2hvdy1oaWRlLXBhc3N3b3JkL3NyYy9saWIvc2hvdy1oaWRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQXVCLGFBQWEsRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFXMUQsTUFBTSxPQUFPLGVBQWU7SUFHMUI7UUFGaUIsV0FBTSxHQUFHLEVBQUUsQ0FBQztJQUVkLENBQUM7SUFFUixLQUFLLENBQUMsRUFBVTtRQUN0QixJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7UUFDNUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUU7WUFDYixFQUFFLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNwQjtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQztJQUVPLElBQUksQ0FBQyxFQUFVO1FBQ3JCLE1BQU0sT0FBTyxHQUFHLElBQUksYUFBYSxDQUFVLENBQUMsQ0FBQyxDQUFDO1FBQzlDLE1BQU0sRUFBRSxHQUFHO1lBQ1QsRUFBRTtZQUNGLElBQUksRUFBRSxLQUFLO1lBQ1gsT0FBTztTQUNSLENBQUM7UUFDRixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNyQixPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxFQUFVLEVBQUUsSUFBYTtRQUNoRCxFQUFFLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNmLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMzQixDQUFDO0lBRU0sYUFBYSxDQUFDLEVBQVU7UUFDN0IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNoQyxDQUFDO0lBRU0sT0FBTyxDQUFDLEVBQVUsRUFBRSxJQUFhO1FBQ3RDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFTSxVQUFVLENBQUMsRUFBVTtRQUMxQixNQUFNLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7OztZQTNDRixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0LCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmludGVyZmFjZSBJU3RhdGUge1xuICBpZDogc3RyaW5nO1xuICBzaG93OiBib29sZWFuO1xuICBzdWJqZWN0PzogU3ViamVjdDxib29sZWFuPjtcbn1cblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU2hvd0hpZGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSByZWFkb25seSBzdGF0ZXMgPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgcHJpdmF0ZSBnZXRJTyhpZDogc3RyaW5nKTogSVN0YXRlIHtcbiAgICBsZXQgaW8gPSB0aGlzLnN0YXRlcy5maW5kKG8gPT4gby5pZCA9PT0gaWQpO1xuICAgIGlmICghaW8gJiYgaWQpIHtcbiAgICAgIGlvID0gdGhpcy5pbml0KGlkKTtcbiAgICB9XG4gICAgcmV0dXJuIGlvO1xuICB9XG5cbiAgcHJpdmF0ZSBpbml0KGlkOiBzdHJpbmcpOiBJU3RhdGUge1xuICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxib29sZWFuPigxKTtcbiAgICBjb25zdCBpbyA9IHtcbiAgICAgIGlkLFxuICAgICAgc2hvdzogZmFsc2UsXG4gICAgICBzdWJqZWN0XG4gICAgfTtcbiAgICB0aGlzLnN0YXRlcy5wdXNoKGlvKTtcbiAgICByZXR1cm4gaW87XG4gIH1cblxuICBwcml2YXRlIHNhdmVBbmRQcm9hZGNhc3QoaW86IElTdGF0ZSwgc2hvdzogYm9vbGVhbikge1xuICAgIGlvLnNob3cgPSBzaG93O1xuICAgIGlvLnN1YmplY3QubmV4dChpby5zaG93KTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRPYnNlcnZhYmxlKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRJTyhpZCkuc3ViamVjdDtcbiAgfVxuXG4gIHB1YmxpYyBzZXRTaG93KGlkOiBzdHJpbmcsIHNob3c6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICB0aGlzLnNhdmVBbmRQcm9hZGNhc3QodGhpcy5nZXRJTyhpZCksIHNob3cpO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZVNob3coaWQ6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGlvID0gdGhpcy5nZXRJTyhpZCk7XG4gICAgdGhpcy5zYXZlQW5kUHJvYWRjYXN0KGlvLCAhaW8uc2hvdyk7XG4gIH1cbn1cbiJdfQ==